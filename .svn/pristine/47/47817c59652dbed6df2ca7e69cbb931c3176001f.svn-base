#set( $symbol_pound = '#' )
#set( $symbol_dollar = '$' )
#set( $symbol_escape = '\' )
package ${package}.web.vo;

import java.io.Serializable;
import java.lang.annotation.Annotation;
import java.lang.reflect.Field;
import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Modifier;
import java.util.Date;

import javax.persistence.ManyToMany;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.OneToOne;

import org.apache.commons.beanutils.BeanUtils;
import org.apache.commons.beanutils.ConvertUtils;
import org.apache.commons.beanutils.converters.DateConverter;
import org.apache.commons.lang.StringUtils;
import org.springframework.util.ReflectionUtils;

import com.demo.hcl.entity.BaseEntity;

public abstract class BaseVO<E extends Object> implements Serializable {

	private Class<E> entity;

	protected BaseVO(Class<E> entity) {
		this.entity = entity;

		// Setting a default converter for date.
		Date defaultDate = null;

		DateConverter dateConverter = new DateConverter(defaultDate);

		ConvertUtils.register(dateConverter, Date.class);
	}

	public E toEntity() {
		E entity = null;

		try {
			entity = this.entity.newInstance();
			
			copyValueToEntityProperties(this, entity);
						
		} catch (Exception ie) {
			ie.printStackTrace();
		}

		return entity;
	}

	
	public Object toDTO(E entity) {

		try {			
			copyEntityToValueObjectProperties(entity, this);
		} catch (Exception ex) {
			ex.printStackTrace();
		}
		
		return this;

	}

	/**
	 * Copies the properties from Value object to Entity object.
	 * 
	 * */
	public void copyValueToEntityProperties(Object valueObject, Object entityObject) throws IllegalAccessException, InvocationTargetException, NoSuchMethodException, InstantiationException{
		
		// Get the list of fields from source objects
		Field[] valueObjectFields = valueObject.getClass().getDeclaredFields();
		
		Class<?> voType = BaseVO.class;
		
		BaseVO associatedVoField;
		
		BaseEntity associatedEntityField;
		
		for(Field valueObjectField : valueObjectFields){
			
			if(voType.isAssignableFrom(valueObjectField.getType())){
				// Get the destination property from truncating the convention suffix.
				valueObjectField.setAccessible(true);
				
				String nestedValueObjectFieldName = valueObjectField.getName();
				String nonPrimitiveEntityFieldName = matchingEntityFieldName(valueObject,nestedValueObjectFieldName);
				
				associatedVoField = (BaseVO) ReflectionUtils.getField(valueObjectField, valueObject);
				associatedEntityField = (BaseEntity) associatedVoField.toEntity();
			
				BeanUtils.setProperty(entityObject, nonPrimitiveEntityFieldName, associatedEntityField);				
			}	
			else if(!Modifier.isFinal(valueObjectField.getModifiers()) && !Modifier.isStatic(valueObjectField.getModifiers())){
				BeanUtils.setProperty(entityObject, valueObjectField.getName(), BeanUtils.getProperty(valueObject, valueObjectField.getName())  );
			}
		}
	}
	
	/**
	 * Copies the properties from Entity object to Value object.
	 * 
	 * */
	public void copyEntityToValueObjectProperties(Object entityObject, Object valueObject) throws IllegalAccessException, InvocationTargetException, NoSuchMethodException, InstantiationException, SecurityException, NoSuchFieldException{
	
		// Get the list of fields from source objects
		Field[] entityObjectFields = entityObject.getClass().getDeclaredFields();
		
		Field valueObjectField;
		// Reference of BaseEntity class type		
		Class<?> entityType = BaseEntity.class;
		
		BaseVO associatedVoField;
		
		BaseEntity associatedEntityField;
		// Iteration of entity properties
		for(Field entityField : entityObjectFields){
			//
			// Checks whether the entity field is an object and is of type BaseEntity class.
			//
			if(entityType.isAssignableFrom(entityField.getType())){
				
				if(isReverselyAssociated(entityField))
					break;
				
				// Get the destination property from truncating the convention suffix.
				entityField.setAccessible(true);
				
				String nonPrimitiveEntityFieldName = entityField.getName();
				String nestedValueObjectFieldName = matchingEntityFieldName(entityObject,nonPrimitiveEntityFieldName);
				// Getting the object value of the field
				associatedEntityField = (BaseEntity) ReflectionUtils.getField(entityField, entityObject);
				
				valueObjectField = valueObject.getClass().getDeclaredField(nestedValueObjectFieldName);
				
				valueObjectField.setAccessible(true);
				
				associatedVoField = (BaseVO) ReflectionUtils.getField(valueObjectField, valueObject);
				
				associatedVoField.toDTO(associatedEntityField);
				//
				// Assign the values to the destination object properties
				//
				BeanUtils.setProperty(valueObject, nestedValueObjectFieldName, associatedVoField);				
			}	
			else if(!Modifier.isFinal(entityField.getModifiers()) && !Modifier.isStatic(entityField.getModifiers())){
				BeanUtils.setProperty(valueObject, entityField.getName(), BeanUtils.getProperty(entityObject, entityField.getName())  );
			}
		}
	}
	
	/**
	 * Checks the associated object for bi-directional relationship object. Returns true if it finds.
	 * 
	 * @return true-if the associated field contains mapped by, false otherwise.
	 * */
	protected boolean isReverselyAssociated(Field associatedField){
		
		if(associatedField.getAnnotation(OneToOne.class) != null){			
			if(!StringUtils.isEmpty(associatedField.getAnnotation(OneToOne.class).mappedBy()))
				return true;
			
		}
		else if(associatedField.getAnnotation(OneToMany.class) != null){
			if(!StringUtils.isEmpty(associatedField.getAnnotation(OneToMany.class).mappedBy()))
				return true;
		}
		else if(associatedField.getAnnotation(ManyToMany.class) != null){
			if(!StringUtils.isEmpty(associatedField.getAnnotation(ManyToMany.class).mappedBy()))
				return true;
		}
		
		return false;
	}
	
	
	protected String matchingEntityFieldName(Object valueObject, String valueObjectFieldName){
		return valueObjectFieldName;
	}
	
	/**
	 * Truncates the last 2 characters from the convention based property name
	 * 
	 * Eg: agentRankVO will be returned as agentRank
	 * 
	 * */
	public String truncateConvention(String property){
		
		return property.substring(0, property.length()-2);
		
	}

}
